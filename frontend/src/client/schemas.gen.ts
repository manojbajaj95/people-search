// This file is auto-generated by @hey-api/openapi-ts

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const PersonSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        profession: {
            type: 'string',
            title: 'Profession'
        },
        location: {
            type: 'string',
            title: 'Location'
        },
        skills: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Skills'
        },
        years_of_experience: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Years Of Experience'
        },
        education: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Education'
        },
        bio: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bio'
        },
        linkedin_profile: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Linkedin Profile'
        },
        website: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Website'
        },
        availability: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Availability'
        },
        hourly_rate: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hourly Rate'
        },
        last_active: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Active'
        },
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['name', 'email', 'profession', 'location', 'skills'],
    title: 'Person'
} as const;

export const SearchQuerySchema = {
    properties: {
        query: {
            type: 'string',
            title: 'Query'
        }
    },
    type: 'object',
    required: ['query'],
    title: 'SearchQuery'
} as const;

export const SearchResultSchema = {
    properties: {
        results: {
            items: {
                '$ref': '#/components/schemas/Person'
            },
            type: 'array',
            title: 'Results'
        }
    },
    type: 'object',
    required: ['results'],
    title: 'SearchResult'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;