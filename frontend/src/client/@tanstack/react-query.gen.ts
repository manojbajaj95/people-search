// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { SearchData, SearchError, SearchResponse, GetPersonData, UpdatePersonData, UpdatePersonError, UpdatePersonResponse, DeletePersonData, DeletePersonError, DeletePersonResponse, CreatePersonData, CreatePersonError, CreatePersonResponse, GetSuggestionsData } from '../types.gen';
import { client, search, getPerson, updatePerson, deletePerson, createPerson, getSuggestions, getRecentSearches } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const searchQueryKey = (options: Options<SearchData>) => [
    createQueryKey("search", options)
];

export const searchOptions = (options: Options<SearchData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await search({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: searchQueryKey(options)
}); };

export const searchMutation = () => { const mutationOptions: UseMutationOptions<SearchResponse, SearchError, Options<SearchData>> = {
    mutationFn: async (options) => {
        const { data } = await search({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getPersonQueryKey = (options: Options<GetPersonData>) => [
    createQueryKey("getPerson", options)
];

export const getPersonOptions = (options: Options<GetPersonData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getPerson({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getPersonQueryKey(options)
}); };

export const updatePersonMutation = () => { const mutationOptions: UseMutationOptions<UpdatePersonResponse, UpdatePersonError, Options<UpdatePersonData>> = {
    mutationFn: async (options) => {
        const { data } = await updatePerson({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deletePersonMutation = () => { const mutationOptions: UseMutationOptions<DeletePersonResponse, DeletePersonError, Options<DeletePersonData>> = {
    mutationFn: async (options) => {
        const { data } = await deletePerson({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const createPersonQueryKey = (options: Options<CreatePersonData>) => [
    createQueryKey("createPerson", options)
];

export const createPersonOptions = (options: Options<CreatePersonData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createPerson({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createPersonQueryKey(options)
}); };

export const createPersonMutation = () => { const mutationOptions: UseMutationOptions<CreatePersonResponse, CreatePersonError, Options<CreatePersonData>> = {
    mutationFn: async (options) => {
        const { data } = await createPerson({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getSuggestionsQueryKey = (options: Options<GetSuggestionsData>) => [
    createQueryKey("getSuggestions", options)
];

export const getSuggestionsOptions = (options: Options<GetSuggestionsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getSuggestions({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getSuggestionsQueryKey(options)
}); };

export const getRecentSearchesQueryKey = (options?: Options) => [
    createQueryKey("getRecentSearches", options)
];

export const getRecentSearchesOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getRecentSearches({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getRecentSearchesQueryKey(options)
}); };